@page "/"
@using ChattyApp.Shared
@inject NavigationManager NavMgr
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Chatty-Chat App</PageTitle>
<h3>Chatty-Chat</h3>

@if (!IsConnected)
{
    <User @bind-Username="_user" Connect="Connect" />
}
else
{
    <ChatMessages @bind-Messages="_messages" ConnectionId="@_connection?.ConnectionId" Username="_user" />
    <Message @bind-CurrentMessage="_currentMessage" Send="Send" />
}

@code {
    private HubConnection? _connection;
    private string _user = string.Empty;
    private string _currentMessage = string.Empty;
    private string _messages = string.Empty;

    ElementReference TextAreaRef;

    public bool IsConnected => _connection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_connection != null)
        {
            await _connection.DisposeAsync();
        }
    }

    private async Task Connect()
    {
        _connection = new HubConnectionBuilder()
                        .WithUrl(NavMgr.ToAbsoluteUri($"/lets-chat?username={_user}"))
                        .Build();

        _connection.On<string, string>(ChatTokens.RECEIVEMESSAGETOKEN, (user, message) =>
        {
            _messages += $"{(string.IsNullOrWhiteSpace(user) ? string.Empty : user)} => {message}\n";

            StateHasChanged();
        });

        await _connection.StartAsync();
    }

    private async Task Send()
    {
        if (_connection != null)
        {
            await _connection.SendAsync(ChatTokens.SENDMESSAGEMETHOD, _user, _currentMessage);

            _currentMessage = string.Empty;
        }
    }

}